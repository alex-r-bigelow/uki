class AbstractClass {
  requireProperties (properties) {
    properties.forEach(m => {
      if (this[m] === undefined) {
        throw new TypeError(m + ' is undefined for class ' + this.constructor.name);
      }
    });
  }
}

class Model extends AbstractClass {
  constructor () {
    super();
    this.eventHandlers = {};
  }
  on (eventName, callback, allowDuplicateListeners) {
    if (!this.eventHandlers[eventName]) {
      this.eventHandlers[eventName] = [];
    }
    if (!allowDuplicateListeners) {
      if (this.eventHandlers[eventName].indexOf(callback) !== -1) {
        return;
      }
    }
    this.eventHandlers[eventName].push(callback);
  }
  off (eventName, callback) {
    if (this.eventHandlers[eventName]) {
      if (!callback) {
        delete this.eventHandlers[eventName];
      } else {
        let index = this.eventHandlers[eventName].indexOf(callback);
        if (index >= 0) {
          this.eventHandlers[eventName].splice(index, 1);
        }
      }
    }
  }
  trigger () {
    let eventName = arguments[0];
    let args = Array.prototype.slice.call(arguments, 1);
    if (this.eventHandlers[eventName]) {
      this.eventHandlers[eventName].forEach(callback => {
        window.setTimeout(() => {   // Add timeout to prevent blocking
          callback.apply(this, args);
        }, 0);
      });
    }
  }
}

class View extends Model {
  constructor () {
    super();
    this.d3el = null;
    this.dirty = false;
    this.drawTimeout = null;
    this.debounceWait = 100;
    this.requireProperties(['setup', 'draw']);
  }
  hasRenderedTo (d3el) {
    // Determine whether this is the first time we've rendered
    // inside this DOM element; return false if this is the first time
    // Also store the element as the last one that we rendered to

    let needsFreshRender = this.dirty;
    if (d3el) {
      if (this.d3el) {
        // only need to do a full render if the last element wasn't the same as this one
        needsFreshRender = this.dirty || d3el.node() !== this.d3el.node();
      } else {
        // we didn't have an element before
        needsFreshRender = true;
      }
      this.d3el = d3el;
    } else {
      if (!this.d3el) {
        // we weren't given a new element to render to, so use the last one
        throw new Error('Called render() without an element to render to (and no prior element has been specified)');
      } else {
        d3el = this.d3el;
      }
    }
    this.dirty = false;
    return !needsFreshRender;
  }
  render (d3el) {
    d3el = d3el || this.d3el;
    if (!this.hasRenderedTo(d3el)) {
      // Call setup immediately
      this.updateContainerCharacteristics(d3el);
      this.setup(d3el);
      this.d3el = d3el;
    }
    // Debounce the actual draw call
    clearTimeout(this.drawTimeout);
    this.drawTimeout = setTimeout(() => {
      this.drawTimeout = null;
      this.draw(d3el);
    }, this.debounceWait);
  }
  updateContainerCharacteristics (d3el) {
    if (d3el !== null) {
      this.emSize = parseFloat(d3el.style('font-size'));
      this.scrollBarSize = this.computeScrollBarSize(d3el);
    }
  }
  computeScrollBarSize (d3el) {
    // blatantly adapted from SO thread:
    // http://stackoverflow.com/questions/13382516/getting-scroll-bar-width-using-javascript
    var outer = document.createElement('div');
    outer.style.visibility = 'hidden';
    outer.style.width = '100px';
    outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps

    d3el.node().appendChild(outer);

    var widthNoScroll = outer.offsetWidth;
    // force scrollbars
    outer.style.overflow = 'scroll';

    // add innerdiv
    var inner = document.createElement('div');
    inner.style.width = '100%';
    outer.appendChild(inner);

    var widthWithScroll = inner.offsetWidth;

    // remove divs
    outer.parentNode.removeChild(outer);

    return widthNoScroll - widthWithScroll;
  }
}

export { AbstractClass, Model, View };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
